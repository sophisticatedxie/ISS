<application>
  <component name="AppStorage">
    <histories>
      <item value="enable Or Disable Status" />
      <item value="Creates a new {@code ThreadPoolExecutor} with the given initial parameters and default thread factory and rejected execution handler. It may be more convenient to use one of the {@link Executors} factory methods instead of this general purpose constructor. @param corePoolSize the number of threads to keep in the pool, even if they are idle, unless {@code allowCoreThreadTimeOut} is set @param maximumPoolSize the maximum number of threads to allow in the pool @param keepAliveTime when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating. @param unit the time unit for the {@code keepAliveTime} argument @param workQueue the queue to use for holding tasks before they are executed. This queue will hold only the {@code Runnable} tasks submitted by the {@code execute} method. @throws IllegalArgumentException if one of the following holds:&lt;br&gt; {@code corePoolSize &lt; 0}&lt;br&gt; {@code keepAliveTime &lt; 0}&lt;br&gt; {@code maximumPoolSize &lt;= 0}&lt;br&gt; {@code maximumPoolSize &lt; corePoolSize} @throws NullPointerException if {@code workQueue} is null" />
      <item value="assert Demand Or Throw" />
      <item value="服务已配置" />
      <item value="已经配置过字典内容" />
      <item value="不知道写的什么垃圾" />
      <item value="The name of the grpc client. This name will be used to get the {@link GrpcChannelProperties config options} for this client." />
      <item value="An annotation for fields of type {@link Channel} or subclasses of {@link AbstractStub}gRPC client services. Also works for annotated methods that only take a single parameter of the same types. Annotated fieldsmethods will be automatically populatedinvoked by Spring. &lt;p&gt; &lt;b&gt;Note:&lt;b&gt; FieldsMethods that are annotated with this annotation should NOT be annotated with {@link Autowired} or {@link Inject} (conflict). &lt;p&gt; &lt;p&gt; &lt;b&gt;Note:&lt;b&gt; If you annotate an AbstractStub with this annotation the bean processing will also apply the {@link StubTransformer}s in the application context. These can be used, for example, to configure {@link CallOptions} such as {@link CallCredentials}. Please note that these transformations aren't applied if you inject a {@link Channel} only. &lt;p&gt; &lt;p&gt; &lt;b&gt;Note:&lt;b&gt; These annotation allows the specification of custom interceptors. These will be appended to the global interceptors and applied using {@link ClientInterceptorsinterceptForward(Channel, ClientInterceptor...)}. &lt;p&gt; @author Michael (yidongnan@gmail.com) @since 2016127" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="6" />
        <entry key="ENGLISH" value="7" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1613367158897" />
  </component>
</application>