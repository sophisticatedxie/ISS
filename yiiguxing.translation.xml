<application>
  <component name="AppStorage">
    <histories>
      <item value="Currently not in use" />
      <item value="未删除" />
      <item value="已删除" />
      <item value="逻辑" />
      <item value="逻辑删除" />
      <item value="身份证正则字符串" />
      <item value="身份证" />
      <item value="Specifies the component model to which the generated mapper should adhere. Supported values are &lt;ul&gt; &lt;li&gt; {@code default}: the mapper uses no component model, instances are typically retrieved via {@link MappersgetMapper(Class)}&lt;li&gt; &lt;li&gt; {@code cdi}: the generated mapper is an application-scoped CDI bean and can be retrieved via {@code @Inject}&lt;li&gt; &lt;li&gt; {@code spring}: the generated mapper is a Spring bean and can be retrieved via {@code @Autowired}&lt;li&gt; &lt;li&gt; {@code jsr330}: the generated mapper is annotated with {@code @javax.inject.Named} and {@code @Singleton}, and can be retrieved via {@code @Inject}&lt;li&gt; &lt;ul&gt; The method overrides an unmappedTargetPolicy set in a central configuration set by {@link config() }" />
      <item value="Additional types for which an import statement is to be added to the generated mapper implementation class. This allows to refer to those types from within mapping expressions given via {@link Mappingexpression()} using their simple name rather than their fully-qualified name." />
      <item value="Other mapper types used by this mapper. May be hand-written classes or other mappers generated by MapStruct. No cycle between generated mapper classes must be created." />
      <item value="social credit code" />
      <item value="If the specified key is not already associated with a value (or is mapped to {@code null}), attempts to compute its value using the given mapping function and enters it into this map unless {@code null}." />
      <item value="规范" />
      <item value="Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type, not children of it. Therefore, &quot;ACTIVE&quot; must be unique within the global scope, not just within &quot;DemanderStatus&quot;." />
      <item value="获取旧数据" />
      <item value="启用的" />
      <item value="禁用的" />
      <item value="INACTIVE" />
      <item value="enable Or Disable Status" />
      <item value="Creates a new {@code ThreadPoolExecutor} with the given initial parameters and default thread factory and rejected execution handler. It may be more convenient to use one of the {@link Executors} factory methods instead of this general purpose constructor. @param corePoolSize the number of threads to keep in the pool, even if they are idle, unless {@code allowCoreThreadTimeOut} is set @param maximumPoolSize the maximum number of threads to allow in the pool @param keepAliveTime when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating. @param unit the time unit for the {@code keepAliveTime} argument @param workQueue the queue to use for holding tasks before they are executed. This queue will hold only the {@code Runnable} tasks submitted by the {@code execute} method. @throws IllegalArgumentException if one of the following holds:&lt;br&gt; {@code corePoolSize &lt; 0}&lt;br&gt; {@code keepAliveTime &lt; 0}&lt;br&gt; {@code maximumPoolSize &lt;= 0}&lt;br&gt; {@code maximumPoolSize &lt; corePoolSize} @throws NullPointerException if {@code workQueue} is null" />
      <item value="assert Demand Or Throw" />
      <item value="服务已配置" />
      <item value="已经配置过字典内容" />
      <item value="不知道写的什么垃圾" />
      <item value="The name of the grpc client. This name will be used to get the {@link GrpcChannelProperties config options} for this client." />
      <item value="An annotation for fields of type {@link Channel} or subclasses of {@link AbstractStub}gRPC client services. Also works for annotated methods that only take a single parameter of the same types. Annotated fieldsmethods will be automatically populatedinvoked by Spring. &lt;p&gt; &lt;b&gt;Note:&lt;b&gt; FieldsMethods that are annotated with this annotation should NOT be annotated with {@link Autowired} or {@link Inject} (conflict). &lt;p&gt; &lt;p&gt; &lt;b&gt;Note:&lt;b&gt; If you annotate an AbstractStub with this annotation the bean processing will also apply the {@link StubTransformer}s in the application context. These can be used, for example, to configure {@link CallOptions} such as {@link CallCredentials}. Please note that these transformations aren't applied if you inject a {@link Channel} only. &lt;p&gt; &lt;p&gt; &lt;b&gt;Note:&lt;b&gt; These annotation allows the specification of custom interceptors. These will be appended to the global interceptors and applied using {@link ClientInterceptorsinterceptForward(Channel, ClientInterceptor...)}. &lt;p&gt; @author Michael (yidongnan@gmail.com) @since 2016127" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="21" />
        <entry key="ENGLISH" value="22" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1613814785403" />
  </component>
</application>