<application>
  <component name="EasyCodeSetting">
    <option name="author" value="xiejr" />
    <option name="globalConfigGroupMap">
      <map>
        <entry key="Default">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的t_前缀&#10;$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(&quot;csc_&quot;,&quot;&quot;)))&#10;&#10;##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($column.name.startsWith(&quot;is&quot;) &amp;&amp; $column.type.equals(&quot;java.lang.Boolean&quot;))&#10;    $!column.setName($tool.firstLowerCase($column.name.substring(2)))&#10;#end&#10;#end&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;otherColumn&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;#set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})$desc&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;import $!import;&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="mybatisSupport" />
                    <option name="value" value="##针对Mybatis 进行支持，主要用于生成xml文件&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##储存列类型&#10;    $tool.call($column.ext.put(&quot;sqlType&quot;, $tool.getField($column.obj.dataType, &quot;typeName&quot;)))&#10;    #if($tool.newHashSet(&quot;java.lang.String&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;VARCHAR&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Boolean&quot;, &quot;boolean&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BOOLEAN&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Byte&quot;, &quot;byte&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BYTE&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Integer&quot;, &quot;int&quot;, &quot;java.lang.Short&quot;, &quot;short&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Long&quot;, &quot;long&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Float&quot;, &quot;float&quot;, &quot;java.lang.Double&quot;, &quot;double&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;NUMERIC&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.util.Date&quot;, &quot;java.sql.Timestamp&quot;, &quot;java.time.Instant&quot;, &quot;java.time.LocalDateTime&quot;, &quot;java.time.OffsetDateTime&quot;, &quot;&#9;java.time.ZonedDateTime&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.sql.Date&quot;, &quot;java.time.LocalDate&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #else&#10;        ##其他类型&#10;        #set($jdbcType=&quot;OTHER&quot;)&#10;    #end&#10;    $tool.call($column.ext.put(&quot;jdbcType&quot;, $jdbcType))&#10;#end&#10;&#10;##定义宏，查询所有列&#10;#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="Default" />
            </GlobalConfigGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="templateGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Repository&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/repository&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}repository;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import com.gaoding.orm.jpa.repository.BaseRepository;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} extends BaseRepository&lt;$!{tableInfo.name}&gt;  {&#10;&#10;   &#10;&#10;}&#10;" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;$!init&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;$!callback.setFileName($tool.append($tableInfo.name, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/entity&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}entity;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10;import com.gaoding.orm.annotation.IdGenerator;&#10;import com.gaoding.orm.entity.BaseOrgEntity;&#10;import com.gaoding.orm.enumcode.IdGeneratorType;&#10;import lombok.*;&#10;import javax.persistence.Entity;&#10;import javax.persistence.Table;&#10;import com.gaoding.orm.entity.BaseEntity;&#10;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;@Data&#10;@Entity&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@EqualsAndHashCode(callSuper = true)&#10;@Accessors(chain=true)&#10;@Table(name = &quot;csc_$tool.hump2Underline(&quot;$!{tableInfo.name}&quot;)&quot;)&#10;public class $!{tableInfo.name} extends BaseEntity implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.name.equals(&quot;orgId&quot;) &amp;&amp; !$column.name.equals(&quot;id&quot;)&#10;    &amp;&amp; !$column.name.equals(&quot;createdBy&quot;) &amp;&amp; !$column.name.equals(&quot;createdAt&quot;)&#10;    &amp;&amp; !$column.name.equals(&quot;updatedBy&quot;) &amp;&amp; !$column.name.equals(&quot;updatedAt&quot;))&#10;    &#10;    /**&#10;     *  ${column.comment}&#10;     */&#10;    &#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    #end&#10;    &#10;#end&#10;&#10;&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import com.gaoding.orm.service.BaseService;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务接口&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} extends BaseService&lt;$!{tableInfo.name}&gt; {&#10;&#10;   &#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repository;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;import com.gaoding.orm.service.impl.BaseServiceImpl;&#10;import javax.annotation.Resource;&#10;import lombok.extern.slf4j.Slf4j;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10; &#10;@Service(&quot;$!tool.firstLowerCase($!{tableInfo.name})Service&quot;)&#10;@Slf4j&#10;public class $!{tableName} extends BaseServiceImpl&lt;$!{tableInfo.name}, $!{tableInfo.name}Repository&gt; implements $!{tableInfo.name}Service {&#10;    @Resource&#10;    private $!{tableInfo.name}Repository $!tool.firstLowerCase($!{tableInfo.name})repository;&#10;&#10; &#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;import io.swagger.annotations.Api;&#10;import io.swagger.annotations.ApiOperation;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import java.util.List;&#10;import javax.validation.Valid;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表控制层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;@Slf4j&#10;@Api(value=&quot;$!tableInfo.comment 控制器&quot;,tags={&quot;$!tableInfo.comment 接口&quot;})&#10;public class $!{tableName} {&#10;    /**&#10;     * $!tableInfo.comment 服务对象&#10;     */&#10;    private final $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;    &#10;&#10;   &#10;  &#10;    &#10;    &#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    @ApiOperation(&quot;根据ID获取单条数据&quot;)&#10;    public $!{tableInfo.name} selectOne(@PathVariable $!pk.shortType id) {&#10;        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.findOne(id);&#10;    }&#10;    &#10;    &#10;    &#10;    /**&#10;     * 获取所有&#10;     *&#10;     * @return 所有数据&#10;     */&#10;    @ApiOperation(&quot;获取所有&quot;)&#10;    @GetMapping(&quot;/all&quot;)&#10;    public List&lt;$!{tableInfo.name}&gt; all() {&#10;        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.findAll(); &#10;    }&#10;    &#10;    &#10;    &#10;     /**&#10;     * 插入单条数据&#10;     *&#10;     * @param param 待插入数据&#10;     * @return void&#10;     */&#10;    @ApiOperation(&quot;插入数据&quot;)&#10;    @PostMapping(&quot;&quot;)&#10;    public void insert(@RequestBody @Valid $!{tableInfo.name}DTO param){&#10;        &#10;    }&#10;    &#10;    &#10;    &#10;    &#10;    /**&#10;     * 根据id删除数据&#10;     *&#10;     * @param id 主键&#10;     * @return void&#10;     */&#10;    @ApiOperation(&quot;根据ID删除数据&quot;)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void deleteById(@PathVariable $!pk.shortType id) {&#10;        this.$!{tool.firstLowerCase($tableInfo.name)}Service.delete(id);&#10;    }&#10;    &#10;    &#10;    &#10;    &#10;    &#10;    &#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;#set($tableName = $tool.append($tableInfo.name, &quot;DTO&quot;))&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;import lombok.*;&#10;import javax.validation.constraints.NotNull;&#10;import javax.validation.constraints.NotEmpty;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@ApiModel(&quot;$!{tableInfo.comment}数据传输对象&quot;)&#10;public class $tableName implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})/**&#10;    * ${column.comment}&#10;    */#end&#10;    &#10;    @ApiModelProperty(value=&quot;${column.comment}&quot;)&#10;    #if($!{tool.getClsNameByFullName($column.type)}!=(&quot;String&quot;))&#10;@NotNull(message=&quot;${column.comment}不得为空&quot;)&#10;#end&#10;    #if($!{tool.getClsNameByFullName($column.type)}==(&quot;String&quot;))&#10;@NotEmpty(message=&quot;${column.comment}不得为空&quot;)   &#10;#end&#10;private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;    &#10;#end&#10;&#10;&#10;&#10;}" />
                    <option name="name" value="dto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;#set($request = $tool.append($tableInfo.name, &quot;Request&quot;))&#10;#set($reply = $tool.append($tableInfo.name, &quot;Reply&quot;))&#10;#set($filename = $tool.append($tableInfo.name, &quot;RpcService&quot;))&#10;$!callback.setFileName($tool.append($filename, &quot;.proto&quot;))&#10;&#10;##使用全局变量实现默认包导入&#10;syntax = &quot;proto3&quot;;&#10;&#10;option java_multiple_files=true;&#10;option java_package=&quot;$!{tableInfo.savePackageName}.rpc.service&quot;;&#10;import &quot;google/protobuf/wrappers.proto&quot;;&#10;import &quot;gd/protobuf/common.proto&quot;;&#10;&#10;service $!{tableInfo.name}Service{&#10;   rpc list(Query$request) returns ($!{reply}) {}&#10;   &#10;   rpc create(Create$request) returns (google.protobuf.BoolValue) {}&#10;&#10;   rpc update(Update$request) returns (google.protobuf.BoolValue){}&#10;&#10;   rpc delete(google.protobuf.Int64Value) returns (google.protobuf.BoolValue) {}&#10;&#10;  &#10;}&#10;&#10;message $!{tableInfo.name}Info{&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;  /**&#10;   * $!{column.comment}&#10;   */&#10;    #set($type = $!{tool.getClsNameByFullName($column.type)})&#10;    #if($type.equals(&quot;String&quot;))&#10;     string   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Double&quot;))&#10;     double   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Long&quot;))&#10;     int64   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Boolean&quot;))&#10;     bool   $!{column.name}=21;&#10;    #end&#10;&#10;#end&#10;}&#10;&#10;message $!{reply}{&#10;  repeated DictServiceListInfo data = 10;&#10;}&#10;&#10;message Query$request{&#10;#foreach($column in $tableInfo.fullColumn)&#10;  /**&#10;   * $!{column.comment}&#10;   */&#10;    #set($type = $!{tool.getClsNameByFullName($column.type)})&#10;    #if($type.equals(&quot;String&quot;))&#10;     string   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Double&quot;))&#10;     double   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Long&quot;))&#10;     int64   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Boolean&quot;))&#10;     bool   $!{column.name}=21;&#10;    #end&#10;&#10;#end&#10;}&#10;&#10;message Create$request{&#10;#foreach($column in $tableInfo.fullColumn)&#10;  /**&#10;   * $!{column.comment}&#10;   */&#10;    #set($type = $!{tool.getClsNameByFullName($column.type)})&#10;    #if($type.equals(&quot;String&quot;))&#10;     string   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Double&quot;))&#10;     double   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Long&quot;))&#10;     int64   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Boolean&quot;))&#10;     bool   $!{column.name}=21;&#10;    #end&#10;&#10;#end&#10;}&#10;&#10;message Update$request{&#10;#foreach($column in $tableInfo.fullColumn)&#10;  /**&#10;   * $!{column.comment}&#10;   */&#10;    #set($type = $!{tool.getClsNameByFullName($column.type)})&#10;    #if($type.equals(&quot;String&quot;))&#10;     string   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Double&quot;))&#10;     double   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Long&quot;))&#10;     int64   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Boolean&quot;))&#10;     bool   $!{column.name}=21;&#10;    #end&#10;&#10;#end&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
                    <option name="name" value="proto.proto" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;$!init&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;UnitTest&quot;,&quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/test&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}test;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import com.gaoding.commons.user.User;&#10;import com.gaoding.commons.user.UserUtil;&#10;import com.gaoding.grpc.client.annotation.GdGrpcClient;&#10;import com.gaoding.grpc.common.protobuf.Common;&#10;import com.gaoding.shared.dict.rpc.service.Create$!{tableInfo.name}Request;&#10;import com.gaoding.shared.dict.rpc.service.$!{tableInfo.name}ServiceGrpc;&#10;import com.gaoding.shared.dict.rpc.service.Query$!{tableInfo.name}Request;&#10;import com.gaoding.shared.dict.rpc.service.Update$!{tableInfo.name}Request;&#10;import com.google.protobuf.BoolValue;&#10;import com.google.protobuf.Int64Value;&#10;import io.grpc.StatusRuntimeException;&#10;import lombok.extern.slf4j.Slf4j;&#10;import lombok.val;&#10;import org.junit.jupiter.api.*;&#10;import org.junit.jupiter.params.ParameterizedTest;&#10;import org.junit.jupiter.params.provider.CsvSource;&#10;import org.junit.jupiter.params.provider.ValueSource;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.test.context.ActiveProfiles;&#10;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;rpc服务单元测试&quot;)&#10;&#10;@SpringBootTest&#10;@Slf4j&#10;@DisplayName(&quot;$!{tableInfo.comment}服务grpc单元测试}&quot;)&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;@ActiveProfiles(&quot;test&quot;)&#10;public class $!{tableInfo.name}UnitTest{&#10;&#10;    @GdGrpcClient&#10;    private $!{tableInfo.name}ServiceGrpc.$!{tableInfo.name}ServiceBlockingStub clientStub;&#10;&#10;   &#10;    @BeforeAll&#10;    public void before(){&#10;        User user=new User();&#10;        user.setId(1L);&#10;        UserUtil.setCurrentUser(user);&#10;    }&#10;&#10;    @ParameterizedTest&#10;    @DisplayName(&quot;新增&quot;)&#10;    @CsvSource({&quot;chinese,中文&quot;, &quot;English,英语&quot;, &quot;Francais,法语&quot;})&#10;    @Order(1)&#10;    public void create(String languageCode, String languageName) {&#10;        try {&#10;            CreateDictLanguageRequest request = CreateDictLanguageRequest.newBuilder().setLanguageCode(languageCode).setLanguageName(languageName).build();&#10;            BoolValue boolValue = dictLanguageServiceBlockingStub.create(request);&#10;            System.out.println(boolValue.getValue() ? &quot;新增成功&quot; : &quot;新增失败&quot;);&#10;        } catch (StatusRuntimeException ex) {&#10;            log.info(&quot;grpc调用异常,原因是:{}&quot;, ex.getMessage());&#10;        }&#10;&#10;    }&#10;&#10;    @ParameterizedTest&#10;    @DisplayName(&quot;分页查询&quot;)&#10;    @ValueSource(strings = {&quot;chinese&quot;, &quot;English&quot;, &quot;Francais&quot;})&#10;    @Order(2)&#10;    public void query(String serviceCode) {&#10;        QueryDictLanguageRequest request = QueryDictLanguageRequest.newBuilder().setLanguageCode(serviceCode).setPage(Common.Page.newBuilder().setPageNum(0).setPageSize(10).build()).build();&#10;        val result = dictLanguageServiceBlockingStub.list(request);&#10;        result.getDataList().forEach(System.out::println);&#10;    }&#10;&#10;&#10;    @ParameterizedTest&#10;    @DisplayName(&quot;更新单条记录&quot;)&#10;    @CsvSource({&quot;1,chinese1,中文1&quot;, &quot;2,English1,英语1&quot;, &quot;3,Francais,法语1&quot;})&#10;    @Order(3)&#10;    public void update(long id, String languageCode, String languageName) {&#10;        try {&#10;            val result = dictLanguageServiceBlockingStub.update(UpdateDictLanguageRequest.newBuilder().setId(id).setLanguageCode(languageCode).setLanguageName(languageName).build());&#10;            System.out.println(result.getValue() ? &quot;更新成功&quot; : &quot;更新失败&quot;);&#10;        } catch (StatusRuntimeException ex) {&#10;            log.info(&quot;grpc调用异常,原因是:{}&quot;, ex.getMessage());&#10;        }&#10;    }&#10;&#10;    @ParameterizedTest&#10;    @DisplayName(&quot;逻辑删除&quot;)&#10;    @ValueSource(longs = {1, 2, 3})&#10;    @Order(4)&#10;    public void logicDelete(long id) {&#10;        try {&#10;            val result = dictLanguageServiceBlockingStub.delete(Int64Value.newBuilder().setValue(id).build());&#10;            System.out.println(result.getValue() ? &quot;删除成功&quot; : &quot;删除失败&quot;);&#10;        } catch (StatusRuntimeException ex) {&#10;            log.info(&quot;grpc调用异常,原因是:{}&quot;, ex.getMessage());&#10;        }&#10;&#10;&#10;    }&#10;&#10;&#10;&#10;}&#10;    &#10;&#10;" />
                    <option name="name" value="test.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="Default" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="MybatisPlus">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;$!init&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10;import com.baomidou.mybatisplus.annotation.TableName;&#10;import com.gaoding.persistence.entity.GdBaseEntity;&#10;import lombok.*;&#10;&#10;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@EqualsAndHashCode(callSuper = true)&#10;@TableName(&quot;$tool.hump2Underline(&quot;$!{tableInfo.name}&quot;)&quot;)&#10;public class $!{tableInfo.name} extends GdBaseEntity {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.name.equals(&quot;orgId&quot;) &amp;&amp; !$column.name.equals(&quot;id&quot;)&#10;    &amp;&amp; !$column.name.equals(&quot;createdBy&quot;) &amp;&amp; !$column.name.equals(&quot;createdAt&quot;)&#10;    &amp;&amp; !$column.name.equals(&quot;updatedBy&quot;) &amp;&amp; !$column.name.equals(&quot;updatedAt&quot;))&#10;    &#10;    /**&#10;     *  ${column.comment}&#10;     */&#10;    &#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    #end&#10;&#10;#end&#10;&#10;&#10;}&#10;&#10;&#10;&#10;&#10;" />
                    <option name="name" value="entity" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;##导入宏定义&#10;$!define&#10;&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import com.gaoding.persistence.mapper.GdBaseMapper;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表数据库访问层&quot;)&#10;public interface $!{tableName} extends GdBaseMapper&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="dao" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Service&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service&quot;, &quot;Service.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service&quot;)&#10;&#10;import com.gaoding.persistence.service.GdBaseService;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务接口&quot;)&#10;public interface $!{tableName} extends GdBaseService&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="service" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;ServiceImpl&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service/impl&quot;, &quot;ServiceImpl.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service.impl&quot;)&#10;&#10;import com.gaoding.persistence.service.impl.GdBaseServiceImpl;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务实现类&quot;)&#10;@Service(&quot;$!tool.firstLowerCase($tableInfo.name)Service&quot;)&#10;public class $!{tableName} extends GdBaseServiceImpl&lt;$!{tableInfo.name},$!{tableInfo.name}Mapper&gt; implements $!{tableInfo.name}Service {&#10;&#10;}" />
                    <option name="name" value="serviceImpl" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Controller&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/controller&quot;, &quot;Controller.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;controller&quot;)&#10;&#10;##定义服务名&#10;#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), &quot;Service&quot;))&#10;&#10;##定义实体对象名&#10;#set($entityName = $!tool.firstLowerCase($!tableInfo.name))&#10;&#10;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;&#10;import com.baomidou.mybatisplus.extension.api.ApiController;&#10;import com.baomidou.mybatisplus.extension.api.R;&#10;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;import java.io.Serializable;&#10;import java.util.List;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表控制层&quot;)&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($!tableInfo.name)&quot;)&#10;public class $!{tableName} extends ApiController {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!{serviceName};&#10;&#10;    /**&#10;     * 分页查询所有数据&#10;     *&#10;     * @param page 分页对象&#10;     * @param $!entityName 查询实体&#10;     * @return 所有数据&#10;     */&#10;    @GetMapping&#10;    public R selectAll(Page&lt;$!tableInfo.name&gt; page, $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.page(page, new QueryWrapper&lt;&gt;($!entityName)));&#10;    }&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;{id}&quot;)&#10;    public R selectOne(@PathVariable Serializable id) {&#10;        return success(this.$!{serviceName}.getById(id));&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 新增结果&#10;     */&#10;    @PostMapping&#10;    public R insert(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.save($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 修改结果&#10;     */&#10;    @PutMapping&#10;    public R update(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.updateById($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 删除数据&#10;     *&#10;     * @param idList 主键结合&#10;     * @return 删除结果&#10;     */&#10;    @DeleteMapping&#10;    public R delete(@RequestParam(&quot;idList&quot;) List&lt;Long&gt; idList) {&#10;        return success(this.$!{serviceName}.removeByIds(idList));&#10;    }&#10;}" />
                    <option name="name" value="controller" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;#set($request = $tool.append($tableInfo.name, &quot;Request&quot;))&#10;#set($reply = $tool.append($tableInfo.name, &quot;Reply&quot;))&#10;#set($filename = $tool.append($tableInfo.name, &quot;RpcService&quot;))&#10;$!callback.setFileName($tool.append($filename, &quot;.proto&quot;))&#10;&#10;##使用全局变量实现默认包导入&#10;syntax = &quot;proto3&quot;;&#10;&#10;option java_multiple_files=true;&#10;option java_package=&quot;$!{tableInfo.savePackageName}.rpc.service&quot;;&#10;import &quot;google/protobuf/wrappers.proto&quot;;&#10;import &quot;gd/protobuf/common.proto&quot;;&#10;&#10;service $!{tableInfo.name}Service{&#10;   rpc list(Query$request) returns ($!{reply}) {}&#10;   &#10;   rpc create(Create$request) returns (google.protobuf.BoolValue) {}&#10;&#10;   rpc update(Update$request) returns (google.protobuf.BoolValue){}&#10;&#10;   rpc delete(google.protobuf.Int64Value) returns (google.protobuf.BoolValue) {}&#10;&#10;  &#10;}&#10;&#10;message $!{tableInfo.name}Info{&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;  /**&#10;   * $!{column.comment}&#10;   */&#10;    #set($type = $!{tool.getClsNameByFullName($column.type)})&#10;    #if($type.equals(&quot;String&quot;))&#10;     string   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Double&quot;))&#10;     double   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Long&quot;))&#10;     int64   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Boolean&quot;))&#10;     bool   $!{column.name}=21;&#10;    #end&#10;   &#10;#end&#10;}&#10;&#10;message $!{reply}{&#10;  repeated DictServiceListInfo data = 10;&#10;}&#10;&#10;message Query$request{&#10;#foreach($column in $tableInfo.fullColumn)&#10;  /**&#10;   * $!{column.comment}&#10;   */&#10;    #set($type = $!{tool.getClsNameByFullName($column.type)})&#10;    #if($type.equals(&quot;String&quot;))&#10;     string   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Double&quot;))&#10;     double   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Long&quot;))&#10;     int64   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Boolean&quot;))&#10;     bool   $!{column.name}=21;&#10;    #end&#10;&#10;#end&#10;}&#10;&#10;message Create$request{&#10;#foreach($column in $tableInfo.fullColumn)&#10;  /**&#10;   * $!{column.comment}&#10;   */&#10;    #set($type = $!{tool.getClsNameByFullName($column.type)})&#10;    #if($type.equals(&quot;String&quot;))&#10;     string   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Double&quot;))&#10;     double   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Long&quot;))&#10;     int64   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Boolean&quot;))&#10;     bool   $!{column.name}=21;&#10;    #end&#10;&#10;#end&#10;}&#10;&#10;message Update$request{&#10;#foreach($column in $tableInfo.fullColumn)&#10;  /**&#10;   * $!{column.comment}&#10;   */&#10;    #set($type = $!{tool.getClsNameByFullName($column.type)})&#10;    #if($type.equals(&quot;String&quot;))&#10;     string   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Double&quot;))&#10;     double   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Long&quot;))&#10;     int64   $!{column.name}=21;&#10;    #end&#10;    #if($type.equals(&quot;Boolean&quot;))&#10;     bool   $!{column.name}=21;&#10;    #end&#10;&#10;#end&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
                    <option name="name" value="proto" />
                  </Template>
                </list>
              </option>
              <option name="name" value="MybatisPlus" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="custom">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;$!init&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10;import com.baomidou.mybatisplus.annotation.TableName;&#10;import com.baomidou.mybatisplus.annotation.FieldFill;&#10;import java.io.Serializable;&#10;import lombok.*;&#10;import com.baomidou.mybatisplus.annotation.TableField;&#10;&#10;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@TableName(&quot;$tool.hump2Underline(&quot;$!{tableInfo.name}&quot;)&quot;)&#10;public class $!{tableInfo.name} implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.name.equals(&quot;createTime&quot;) &amp;&amp;  !$column.name.equals(&quot;updateTime&quot;))&#10;    &#10;    /**&#10;     *  ${column.comment}&#10;     */&#10;    &#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    #end&#10;&#10;    #if($column.name.equals(&quot;createTime&quot;))&#10;    &#10;    /**&#10;     *  ${column.comment}&#10;     */&#10;    @TableField(fill=FieldFill.INSERT)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    #end&#10;&#10;    #if($column.name.equals(&quot;updateTime&quot;))&#10;    &#10;    /**&#10;     *  ${column.comment}&#10;     */&#10;    @TableField(fill=FieldFill.INSERT_UPDATE)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    #end&#10;    &#10;&#10;#end&#10;&#10;&#10;}&#10;&#10;&#10;&#10;&#10;" />
                    <option name="name" value="entity" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;##导入宏定义&#10;$!define&#10;&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;import import com.baomidou.mybatisplus.core.mapper.BaseMapper;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表数据库访问层&quot;)&#10;public interface $!{tableName} extends BaseMapper&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="dao" />
                  </Template>
                  <Template>
                    <option name="code" value="$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Service&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service&quot;, &quot;Service.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;import com.baomidou.mybatisplus.extension.service.IService&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务接口&quot;)&#10;public interface $!{tableName} extends IService&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="service" />
                  </Template>
                  <Template>
                    <option name="code" value="$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;ServiceImpl&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service/impl&quot;, &quot;ServiceImpl.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service.impl&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务实现类&quot;)&#10;@Service(&quot;$!tool.firstLowerCase($tableInfo.name)Service&quot;)&#10;public class $!{tableName} extends ServiceImpl&lt;$!{tableInfo.name}Mapper,$!{tableInfo.name}&gt; implements $!{tableInfo.name}Service {&#10;&#10;}" />
                    <option name="name" value="serviceImpl" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import $!{tableInfo.savePackageName}.convertor.$!{tableInfo.name}Convertor;&#10;import org.springframework.web.bind.annotation.*;&#10;import io.swagger.annotations.Api;&#10;import io.swagger.annotations.ApiOperation;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import java.util.List;&#10;import javax.validation.Valid;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表控制层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;@Slf4j&#10;@Api(value=&quot;$!tableInfo.comment 控制器&quot;,tags={&quot;$!tableInfo.comment 接口&quot;})&#10;public class $!{tableName} {&#10;    /**&#10;     * $!tableInfo.comment 服务对象&#10;     */&#10;    private final $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;    &#10;&#10;    /**&#10;     * $!tableInfo.comment 领域对象转换器&#10;     */&#10;    private final $!{tableInfo.name}Convertor $!tool.firstLowerCase($tableInfo.name)Convertor;&#10;    &#10;    &#10;    &#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    @ApiOperation(&quot;根据ID获取单条数据&quot;)&#10;    public $!{tableInfo.name} selectOne(@PathVariable $!pk.shortType id) {&#10;        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.findOne(id);&#10;    }&#10;    &#10;    &#10;    &#10;    /**&#10;     * 获取所有&#10;     *&#10;     * @return 所有数据&#10;     */&#10;    @ApiOperation(&quot;获取所有&quot;)&#10;    @GetMapping(&quot;/all&quot;)&#10;    public List&lt;$!{tableInfo.name}&gt; all() {&#10;        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.findAll(); &#10;    }&#10;    &#10;    &#10;    &#10;     /**&#10;     * 插入单条数据&#10;     *&#10;     * @param param 待插入数据&#10;     * @return void&#10;     */&#10;    @ApiOperation(&quot;插入数据&quot;)&#10;    @PostMapping(&quot;&quot;)&#10;    public void insert(@RequestBody @Valid $!{tableInfo.name}DTO param){&#10;        $!{tableInfo.name} entity=this.$!{tool.firstLowerCase($tableInfo.name)}Convertor.dtoToEntity(param);&#10;        this.$!{tool.firstLowerCase($tableInfo.name)}Service.save(entity);&#10;    }&#10;    &#10;    &#10;    &#10;    &#10;    /**&#10;     * 根据id删除数据&#10;     *&#10;     * @param id 主键&#10;     * @return void&#10;     */&#10;    @ApiOperation(&quot;根据ID删除数据&quot;)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void deleteById(@PathVariable $!pk.shortType id) {&#10;        this.$!{tool.firstLowerCase($tableInfo.name)}Service.delete(id);&#10;    }&#10;    &#10;    &#10;    &#10;    &#10;    &#10;    &#10;&#10;}" />
                    <option name="name" value="controller" />
                  </Template>
                </list>
              </option>
              <option name="name" value="custom" />
            </TemplateGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="typeMapperGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TypeMapperGroup>
              <option name="elementList">
                <list>
                  <TypeMapper>
                    <option name="columnType" value="varchar(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="char(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="text" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="integer" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int4" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int8" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime" />
                    <option name="javaType" value="java.time.LocalDateTime" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="boolean" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="tinyint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Object" />
                  </TypeMapper>
                </list>
              </option>
              <option name="name" value="Default" />
            </TypeMapperGroup>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>